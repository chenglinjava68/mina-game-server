<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.1.xsd
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">
        
    <description>Spring MVC Config</description>

	<!-- 扫描指定的包中的类上的注解 -->
	<context:component-scan base-package="com.jqy" />

	<!-- 默认的注解映射的支持，主要作用于@Controller，激活该模式，下面是一种简写形式，完全可以手动配置替代这种简写形式，它会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter，是spring 
		MVC为@Controllers分发请求所必须的 -->
	<!-- <mvc:annotation-driven /> -->

	<!-- 解决Spring MVC 返回JSON乱码问题 -->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean class="com.jqy.util.UTF8StringHttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 视图解释类，jsp页面解析器，当Controller返回XXX字符串时，先通过拦截器，然后该类就会在/WEB-INF/views/目录下，查找XXX.jsp文件 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
	</bean>

	<!-- 对静态资源文件的访问 方案一 （二选一）此配置只能访问根目录下的资源文件，不能访问WEB-INF/下的资源文件 -->
	<!-- <mvc:default-servlet-handler /> -->

	<!-- 对静态资源文件的访问 方案二 （二选一） 此配置可访问WEB-INF/下的资源文件 -->
	<mvc:resources location="/WEB-INF/resources/" mapping="/resources/**" />

	<!-- 拦截器 <mvc:interceptors> <bean class="com.core.mvc.MyInteceptor" /> </mvc:interceptors> 
	<mvc:interceptors>
		<bean class="com.jqy.interceptor.ResourceInterceptor" />
	</mvc:interceptors>
 	-->
 	
	<import resource="spring.xml" />
</beans>
